// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dragon.proto

#ifndef PROTOBUF_dragon_2eproto__INCLUDED
#define PROTOBUF_dragon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace middleware {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dragon_2eproto();
void protobuf_AssignDesc_dragon_2eproto();
void protobuf_ShutdownFile_dragon_2eproto();

class JntCmd;
class Command;
class JointStates;
class PowerStates;
class Feedback;

enum CmdType {
  UNKNOWN_TASK = -1,
  JNT_TASK = 0,
  EEF_TASK = 1,
  N_CMDS = 2
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = UNKNOWN_TASK;
const CmdType CmdType_MAX = N_CMDS;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum JntCmdType {
  UNKNOWN_CMD = -1,
  POS = 0,
  VEL = 1,
  TOR = 2,
  N_JNT_CMD_TYPES = 3
};
bool JntCmdType_IsValid(int value);
const JntCmdType JntCmdType_MIN = UNKNOWN_CMD;
const JntCmdType JntCmdType_MAX = N_JNT_CMD_TYPES;
const int JntCmdType_ARRAYSIZE = JntCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JntCmdType_descriptor();
inline const ::std::string& JntCmdType_Name(JntCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JntCmdType_descriptor(), value);
}
inline bool JntCmdType_Parse(
    const ::std::string& name, JntCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JntCmdType>(
    JntCmdType_descriptor(), name, value);
}
enum LegType {
  UNKNOWN_LEG = -1,
  FL = 0,
  FR = 1,
  HL = 2,
  HR = 3,
  N_LEGS = 4
};
bool LegType_IsValid(int value);
const LegType LegType_MIN = UNKNOWN_LEG;
const LegType LegType_MAX = N_LEGS;
const int LegType_ARRAYSIZE = LegType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LegType_descriptor();
inline const ::std::string& LegType_Name(LegType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LegType_descriptor(), value);
}
inline bool LegType_Parse(
    const ::std::string& name, LegType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LegType>(
    LegType_descriptor(), name, value);
}
enum JntType {
  UNKNOWN_JNT = -1,
  YAW = 0,
  HIP = 1,
  KNEE = 2,
  N_JNTS = 3
};
bool JntType_IsValid(int value);
const JntType JntType_MIN = UNKNOWN_JNT;
const JntType JntType_MAX = N_JNTS;
const int JntType_ARRAYSIZE = JntType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JntType_descriptor();
inline const ::std::string& JntType_Name(JntType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JntType_descriptor(), value);
}
inline bool JntType_Parse(
    const ::std::string& name, JntType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JntType>(
    JntType_descriptor(), name, value);
}
enum FbType {
  JOINT_STATES = 0,
  POWER_STATES = 1,
  N_FBS = 2
};
bool FbType_IsValid(int value);
const FbType FbType_MIN = JOINT_STATES;
const FbType FbType_MAX = N_FBS;
const int FbType_ARRAYSIZE = FbType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FbType_descriptor();
inline const ::std::string& FbType_Name(FbType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FbType_descriptor(), value);
}
inline bool FbType_Parse(
    const ::std::string& name, FbType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FbType>(
    FbType_descriptor(), name, value);
}
enum PowerFlag {
  VOLTAGE_OK = 1,
  VOLTAGE_ERROR = 2
};
bool PowerFlag_IsValid(int value);
const PowerFlag PowerFlag_MIN = VOLTAGE_OK;
const PowerFlag PowerFlag_MAX = VOLTAGE_ERROR;
const int PowerFlag_ARRAYSIZE = PowerFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* PowerFlag_descriptor();
inline const ::std::string& PowerFlag_Name(PowerFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    PowerFlag_descriptor(), value);
}
inline bool PowerFlag_Parse(
    const ::std::string& name, PowerFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PowerFlag>(
    PowerFlag_descriptor(), name, value);
}
// ===================================================================

class JntCmd : public ::google::protobuf::Message {
 public:
  JntCmd();
  virtual ~JntCmd();

  JntCmd(const JntCmd& from);

  inline JntCmd& operator=(const JntCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JntCmd& default_instance();

  void Swap(JntCmd* other);

  // implements Message ----------------------------------------------

  JntCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JntCmd& from);
  void MergeFrom(const JntCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .middleware.LegType leg = 1;
  inline bool has_leg() const;
  inline void clear_leg();
  static const int kLegFieldNumber = 1;
  inline ::middleware::LegType leg() const;
  inline void set_leg(::middleware::LegType value);

  // required .middleware.JntType jnt = 2;
  inline bool has_jnt() const;
  inline void clear_jnt();
  static const int kJntFieldNumber = 2;
  inline ::middleware::JntType jnt() const;
  inline void set_jnt(::middleware::JntType value);

  // required .middleware.JntCmdType type = 3 [default = POS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::middleware::JntCmdType type() const;
  inline void set_type(::middleware::JntCmdType value);

  // required float cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline float cmd() const;
  inline void set_cmd(float value);

  // @@protoc_insertion_point(class_scope:middleware.JntCmd)
 private:
  inline void set_has_leg();
  inline void clear_has_leg();
  inline void set_has_jnt();
  inline void clear_has_jnt();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int leg_;
  int jnt_;
  int type_;
  float cmd_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static JntCmd* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .middleware.CmdType idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::middleware::CmdType idx() const;
  inline void set_idx(::middleware::CmdType value);

  // optional .middleware.JntCmd jnt_cmd = 2;
  inline bool has_jnt_cmd() const;
  inline void clear_jnt_cmd();
  static const int kJntCmdFieldNumber = 2;
  inline const ::middleware::JntCmd& jnt_cmd() const;
  inline ::middleware::JntCmd* mutable_jnt_cmd();
  inline ::middleware::JntCmd* release_jnt_cmd();
  inline void set_allocated_jnt_cmd(::middleware::JntCmd* jnt_cmd);

  // @@protoc_insertion_point(class_scope:middleware.Command)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_jnt_cmd();
  inline void clear_has_jnt_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::middleware::JntCmd* jnt_cmd_;
  int idx_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class JointStates : public ::google::protobuf::Message {
 public:
  JointStates();
  virtual ~JointStates();

  JointStates(const JointStates& from);

  inline JointStates& operator=(const JointStates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointStates& default_instance();

  void Swap(JointStates* other);

  // implements Message ----------------------------------------------

  JointStates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointStates& from);
  void MergeFrom(const JointStates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .middleware.LegType leg = 1;
  inline bool has_leg() const;
  inline void clear_leg();
  static const int kLegFieldNumber = 1;
  inline ::middleware::LegType leg() const;
  inline void set_leg(::middleware::LegType value);

  // repeated float pos = 2 [packed = true];
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline float pos(int index) const;
  inline void set_pos(int index, float value);
  inline void add_pos(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pos() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:middleware.JointStates)
 private:
  inline void set_has_leg();
  inline void clear_has_leg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  int leg_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static JointStates* default_instance_;
};
// -------------------------------------------------------------------

class PowerStates : public ::google::protobuf::Message {
 public:
  PowerStates();
  virtual ~PowerStates();

  PowerStates(const PowerStates& from);

  inline PowerStates& operator=(const PowerStates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerStates& default_instance();

  void Swap(PowerStates* other);

  // implements Message ----------------------------------------------

  PowerStates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerStates& from);
  void MergeFrom(const PowerStates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float voltage = 1;
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 1;
  inline float voltage() const;
  inline void set_voltage(float value);

  // required float current = 2;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 2;
  inline float current() const;
  inline void set_current(float value);

  // required .middleware.PowerFlag overvoltage = 3;
  inline bool has_overvoltage() const;
  inline void clear_overvoltage();
  static const int kOvervoltageFieldNumber = 3;
  inline ::middleware::PowerFlag overvoltage() const;
  inline void set_overvoltage(::middleware::PowerFlag value);

  // required .middleware.PowerFlag overcurrent = 4;
  inline bool has_overcurrent() const;
  inline void clear_overcurrent();
  static const int kOvercurrentFieldNumber = 4;
  inline ::middleware::PowerFlag overcurrent() const;
  inline void set_overcurrent(::middleware::PowerFlag value);

  // @@protoc_insertion_point(class_scope:middleware.PowerStates)
 private:
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_overvoltage();
  inline void clear_has_overvoltage();
  inline void set_has_overcurrent();
  inline void clear_has_overcurrent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float voltage_;
  float current_;
  int overvoltage_;
  int overcurrent_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static PowerStates* default_instance_;
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  void Swap(Feedback* other);

  // implements Message ----------------------------------------------

  Feedback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .middleware.FbType idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::middleware::FbType idx() const;
  inline void set_idx(::middleware::FbType value);

  // optional .middleware.JointStates joint_states = 2;
  inline bool has_joint_states() const;
  inline void clear_joint_states();
  static const int kJointStatesFieldNumber = 2;
  inline const ::middleware::JointStates& joint_states() const;
  inline ::middleware::JointStates* mutable_joint_states();
  inline ::middleware::JointStates* release_joint_states();
  inline void set_allocated_joint_states(::middleware::JointStates* joint_states);

  // optional .middleware.PowerStates power_states = 3;
  inline bool has_power_states() const;
  inline void clear_power_states();
  static const int kPowerStatesFieldNumber = 3;
  inline const ::middleware::PowerStates& power_states() const;
  inline ::middleware::PowerStates* mutable_power_states();
  inline ::middleware::PowerStates* release_power_states();
  inline void set_allocated_power_states(::middleware::PowerStates* power_states);

  // @@protoc_insertion_point(class_scope:middleware.Feedback)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_joint_states();
  inline void clear_has_joint_states();
  inline void set_has_power_states();
  inline void clear_has_power_states();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::middleware::JointStates* joint_states_;
  ::middleware::PowerStates* power_states_;
  int idx_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static Feedback* default_instance_;
};
// ===================================================================


// ===================================================================

// JntCmd

// required .middleware.LegType leg = 1;
inline bool JntCmd::has_leg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JntCmd::set_has_leg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JntCmd::clear_has_leg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JntCmd::clear_leg() {
  leg_ = -1;
  clear_has_leg();
}
inline ::middleware::LegType JntCmd::leg() const {
  // @@protoc_insertion_point(field_get:middleware.JntCmd.leg)
  return static_cast< ::middleware::LegType >(leg_);
}
inline void JntCmd::set_leg(::middleware::LegType value) {
  assert(::middleware::LegType_IsValid(value));
  set_has_leg();
  leg_ = value;
  // @@protoc_insertion_point(field_set:middleware.JntCmd.leg)
}

// required .middleware.JntType jnt = 2;
inline bool JntCmd::has_jnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JntCmd::set_has_jnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JntCmd::clear_has_jnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JntCmd::clear_jnt() {
  jnt_ = -1;
  clear_has_jnt();
}
inline ::middleware::JntType JntCmd::jnt() const {
  // @@protoc_insertion_point(field_get:middleware.JntCmd.jnt)
  return static_cast< ::middleware::JntType >(jnt_);
}
inline void JntCmd::set_jnt(::middleware::JntType value) {
  assert(::middleware::JntType_IsValid(value));
  set_has_jnt();
  jnt_ = value;
  // @@protoc_insertion_point(field_set:middleware.JntCmd.jnt)
}

// required .middleware.JntCmdType type = 3 [default = POS];
inline bool JntCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JntCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JntCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JntCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::middleware::JntCmdType JntCmd::type() const {
  // @@protoc_insertion_point(field_get:middleware.JntCmd.type)
  return static_cast< ::middleware::JntCmdType >(type_);
}
inline void JntCmd::set_type(::middleware::JntCmdType value) {
  assert(::middleware::JntCmdType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:middleware.JntCmd.type)
}

// required float cmd = 4;
inline bool JntCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JntCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JntCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JntCmd::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline float JntCmd::cmd() const {
  // @@protoc_insertion_point(field_get:middleware.JntCmd.cmd)
  return cmd_;
}
inline void JntCmd::set_cmd(float value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:middleware.JntCmd.cmd)
}

// -------------------------------------------------------------------

// Command

// required .middleware.CmdType idx = 1;
inline bool Command::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_idx() {
  idx_ = -1;
  clear_has_idx();
}
inline ::middleware::CmdType Command::idx() const {
  // @@protoc_insertion_point(field_get:middleware.Command.idx)
  return static_cast< ::middleware::CmdType >(idx_);
}
inline void Command::set_idx(::middleware::CmdType value) {
  assert(::middleware::CmdType_IsValid(value));
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:middleware.Command.idx)
}

// optional .middleware.JntCmd jnt_cmd = 2;
inline bool Command::has_jnt_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_jnt_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_jnt_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_jnt_cmd() {
  if (jnt_cmd_ != NULL) jnt_cmd_->::middleware::JntCmd::Clear();
  clear_has_jnt_cmd();
}
inline const ::middleware::JntCmd& Command::jnt_cmd() const {
  // @@protoc_insertion_point(field_get:middleware.Command.jnt_cmd)
  return jnt_cmd_ != NULL ? *jnt_cmd_ : *default_instance_->jnt_cmd_;
}
inline ::middleware::JntCmd* Command::mutable_jnt_cmd() {
  set_has_jnt_cmd();
  if (jnt_cmd_ == NULL) jnt_cmd_ = new ::middleware::JntCmd;
  // @@protoc_insertion_point(field_mutable:middleware.Command.jnt_cmd)
  return jnt_cmd_;
}
inline ::middleware::JntCmd* Command::release_jnt_cmd() {
  clear_has_jnt_cmd();
  ::middleware::JntCmd* temp = jnt_cmd_;
  jnt_cmd_ = NULL;
  return temp;
}
inline void Command::set_allocated_jnt_cmd(::middleware::JntCmd* jnt_cmd) {
  delete jnt_cmd_;
  jnt_cmd_ = jnt_cmd;
  if (jnt_cmd) {
    set_has_jnt_cmd();
  } else {
    clear_has_jnt_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:middleware.Command.jnt_cmd)
}

// -------------------------------------------------------------------

// JointStates

// required .middleware.LegType leg = 1;
inline bool JointStates::has_leg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointStates::set_has_leg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointStates::clear_has_leg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointStates::clear_leg() {
  leg_ = -1;
  clear_has_leg();
}
inline ::middleware::LegType JointStates::leg() const {
  // @@protoc_insertion_point(field_get:middleware.JointStates.leg)
  return static_cast< ::middleware::LegType >(leg_);
}
inline void JointStates::set_leg(::middleware::LegType value) {
  assert(::middleware::LegType_IsValid(value));
  set_has_leg();
  leg_ = value;
  // @@protoc_insertion_point(field_set:middleware.JointStates.leg)
}

// repeated float pos = 2 [packed = true];
inline int JointStates::pos_size() const {
  return pos_.size();
}
inline void JointStates::clear_pos() {
  pos_.Clear();
}
inline float JointStates::pos(int index) const {
  // @@protoc_insertion_point(field_get:middleware.JointStates.pos)
  return pos_.Get(index);
}
inline void JointStates::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:middleware.JointStates.pos)
}
inline void JointStates::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:middleware.JointStates.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
JointStates::pos() const {
  // @@protoc_insertion_point(field_list:middleware.JointStates.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
JointStates::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:middleware.JointStates.pos)
  return &pos_;
}

// -------------------------------------------------------------------

// PowerStates

// required float voltage = 1;
inline bool PowerStates::has_voltage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerStates::set_has_voltage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerStates::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerStates::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline float PowerStates::voltage() const {
  // @@protoc_insertion_point(field_get:middleware.PowerStates.voltage)
  return voltage_;
}
inline void PowerStates::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:middleware.PowerStates.voltage)
}

// required float current = 2;
inline bool PowerStates::has_current() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerStates::set_has_current() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerStates::clear_has_current() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerStates::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline float PowerStates::current() const {
  // @@protoc_insertion_point(field_get:middleware.PowerStates.current)
  return current_;
}
inline void PowerStates::set_current(float value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:middleware.PowerStates.current)
}

// required .middleware.PowerFlag overvoltage = 3;
inline bool PowerStates::has_overvoltage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerStates::set_has_overvoltage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerStates::clear_has_overvoltage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerStates::clear_overvoltage() {
  overvoltage_ = 1;
  clear_has_overvoltage();
}
inline ::middleware::PowerFlag PowerStates::overvoltage() const {
  // @@protoc_insertion_point(field_get:middleware.PowerStates.overvoltage)
  return static_cast< ::middleware::PowerFlag >(overvoltage_);
}
inline void PowerStates::set_overvoltage(::middleware::PowerFlag value) {
  assert(::middleware::PowerFlag_IsValid(value));
  set_has_overvoltage();
  overvoltage_ = value;
  // @@protoc_insertion_point(field_set:middleware.PowerStates.overvoltage)
}

// required .middleware.PowerFlag overcurrent = 4;
inline bool PowerStates::has_overcurrent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerStates::set_has_overcurrent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PowerStates::clear_has_overcurrent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PowerStates::clear_overcurrent() {
  overcurrent_ = 1;
  clear_has_overcurrent();
}
inline ::middleware::PowerFlag PowerStates::overcurrent() const {
  // @@protoc_insertion_point(field_get:middleware.PowerStates.overcurrent)
  return static_cast< ::middleware::PowerFlag >(overcurrent_);
}
inline void PowerStates::set_overcurrent(::middleware::PowerFlag value) {
  assert(::middleware::PowerFlag_IsValid(value));
  set_has_overcurrent();
  overcurrent_ = value;
  // @@protoc_insertion_point(field_set:middleware.PowerStates.overcurrent)
}

// -------------------------------------------------------------------

// Feedback

// required .middleware.FbType idx = 1;
inline bool Feedback::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Feedback::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Feedback::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Feedback::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::middleware::FbType Feedback::idx() const {
  // @@protoc_insertion_point(field_get:middleware.Feedback.idx)
  return static_cast< ::middleware::FbType >(idx_);
}
inline void Feedback::set_idx(::middleware::FbType value) {
  assert(::middleware::FbType_IsValid(value));
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:middleware.Feedback.idx)
}

// optional .middleware.JointStates joint_states = 2;
inline bool Feedback::has_joint_states() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Feedback::set_has_joint_states() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Feedback::clear_has_joint_states() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Feedback::clear_joint_states() {
  if (joint_states_ != NULL) joint_states_->::middleware::JointStates::Clear();
  clear_has_joint_states();
}
inline const ::middleware::JointStates& Feedback::joint_states() const {
  // @@protoc_insertion_point(field_get:middleware.Feedback.joint_states)
  return joint_states_ != NULL ? *joint_states_ : *default_instance_->joint_states_;
}
inline ::middleware::JointStates* Feedback::mutable_joint_states() {
  set_has_joint_states();
  if (joint_states_ == NULL) joint_states_ = new ::middleware::JointStates;
  // @@protoc_insertion_point(field_mutable:middleware.Feedback.joint_states)
  return joint_states_;
}
inline ::middleware::JointStates* Feedback::release_joint_states() {
  clear_has_joint_states();
  ::middleware::JointStates* temp = joint_states_;
  joint_states_ = NULL;
  return temp;
}
inline void Feedback::set_allocated_joint_states(::middleware::JointStates* joint_states) {
  delete joint_states_;
  joint_states_ = joint_states;
  if (joint_states) {
    set_has_joint_states();
  } else {
    clear_has_joint_states();
  }
  // @@protoc_insertion_point(field_set_allocated:middleware.Feedback.joint_states)
}

// optional .middleware.PowerStates power_states = 3;
inline bool Feedback::has_power_states() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Feedback::set_has_power_states() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Feedback::clear_has_power_states() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Feedback::clear_power_states() {
  if (power_states_ != NULL) power_states_->::middleware::PowerStates::Clear();
  clear_has_power_states();
}
inline const ::middleware::PowerStates& Feedback::power_states() const {
  // @@protoc_insertion_point(field_get:middleware.Feedback.power_states)
  return power_states_ != NULL ? *power_states_ : *default_instance_->power_states_;
}
inline ::middleware::PowerStates* Feedback::mutable_power_states() {
  set_has_power_states();
  if (power_states_ == NULL) power_states_ = new ::middleware::PowerStates;
  // @@protoc_insertion_point(field_mutable:middleware.Feedback.power_states)
  return power_states_;
}
inline ::middleware::PowerStates* Feedback::release_power_states() {
  clear_has_power_states();
  ::middleware::PowerStates* temp = power_states_;
  power_states_ = NULL;
  return temp;
}
inline void Feedback::set_allocated_power_states(::middleware::PowerStates* power_states) {
  delete power_states_;
  power_states_ = power_states;
  if (power_states) {
    set_has_power_states();
  } else {
    clear_has_power_states();
  }
  // @@protoc_insertion_point(field_set_allocated:middleware.Feedback.power_states)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace middleware

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::middleware::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::CmdType>() {
  return ::middleware::CmdType_descriptor();
}
template <> struct is_proto_enum< ::middleware::JntCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::JntCmdType>() {
  return ::middleware::JntCmdType_descriptor();
}
template <> struct is_proto_enum< ::middleware::LegType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::LegType>() {
  return ::middleware::LegType_descriptor();
}
template <> struct is_proto_enum< ::middleware::JntType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::JntType>() {
  return ::middleware::JntType_descriptor();
}
template <> struct is_proto_enum< ::middleware::FbType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::FbType>() {
  return ::middleware::FbType_descriptor();
}
template <> struct is_proto_enum< ::middleware::PowerFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::middleware::PowerFlag>() {
  return ::middleware::PowerFlag_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dragon_2eproto__INCLUDED
