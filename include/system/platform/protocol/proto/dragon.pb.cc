// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dragon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dragon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace middleware {

namespace {

const ::google::protobuf::Descriptor* JntCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JntCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointStates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointStates_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerStates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerStates_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feedback_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JntCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LegType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JntType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FbType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerFlag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dragon_2eproto() {
  protobuf_AddDesc_dragon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dragon.proto");
  GOOGLE_CHECK(file != NULL);
  JntCmd_descriptor_ = file->message_type(0);
  static const int JntCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, jnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, cmd_),
  };
  JntCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JntCmd_descriptor_,
      JntCmd::default_instance_,
      JntCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JntCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JntCmd));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, jnt_cmd_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  JointStates_descriptor_ = file->message_type(2);
  static const int JointStates_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointStates, leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointStates, pos_),
  };
  JointStates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointStates_descriptor_,
      JointStates::default_instance_,
      JointStates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointStates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointStates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointStates));
  PowerStates_descriptor_ = file->message_type(3);
  static const int PowerStates_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, overvoltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, overcurrent_),
  };
  PowerStates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerStates_descriptor_,
      PowerStates::default_instance_,
      PowerStates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerStates));
  Feedback_descriptor_ = file->message_type(4);
  static const int Feedback_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, joint_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, power_states_),
  };
  Feedback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Feedback_descriptor_,
      Feedback::default_instance_,
      Feedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Feedback));
  CmdType_descriptor_ = file->enum_type(0);
  JntCmdType_descriptor_ = file->enum_type(1);
  LegType_descriptor_ = file->enum_type(2);
  JntType_descriptor_ = file->enum_type(3);
  FbType_descriptor_ = file->enum_type(4);
  PowerFlag_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dragon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JntCmd_descriptor_, &JntCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointStates_descriptor_, &JointStates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerStates_descriptor_, &PowerStates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Feedback_descriptor_, &Feedback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dragon_2eproto() {
  delete JntCmd::default_instance_;
  delete JntCmd_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete JointStates::default_instance_;
  delete JointStates_reflection_;
  delete PowerStates::default_instance_;
  delete PowerStates_reflection_;
  delete Feedback::default_instance_;
  delete Feedback_reflection_;
}

void protobuf_AddDesc_dragon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014dragon.proto\022\nmiddleware\"\204\001\n\006JntCmd\022 \n"
    "\003leg\030\001 \002(\0162\023.middleware.LegType\022 \n\003jnt\030\002"
    " \002(\0162\023.middleware.JntType\022)\n\004type\030\003 \002(\0162"
    "\026.middleware.JntCmdType:\003POS\022\013\n\003cmd\030\004 \002("
    "\002\"P\n\007Command\022 \n\003idx\030\001 \002(\0162\023.middleware.C"
    "mdType\022#\n\007jnt_cmd\030\002 \001(\0132\022.middleware.Jnt"
    "Cmd\"@\n\013JointStates\022 \n\003leg\030\001 \002(\0162\023.middle"
    "ware.LegType\022\017\n\003pos\030\002 \003(\002B\002\020\001\"\207\001\n\013PowerS"
    "tates\022\017\n\007voltage\030\001 \002(\002\022\017\n\007current\030\002 \002(\002\022"
    "*\n\013overvoltage\030\003 \002(\0162\025.middleware.PowerF"
    "lag\022*\n\013overcurrent\030\004 \002(\0162\025.middleware.Po"
    "werFlag\"\211\001\n\010Feedback\022\037\n\003idx\030\001 \002(\0162\022.midd"
    "leware.FbType\022-\n\014joint_states\030\002 \001(\0132\027.mi"
    "ddleware.JointStates\022-\n\014power_states\030\003 \001"
    "(\0132\027.middleware.PowerStates*L\n\007CmdType\022\031"
    "\n\014UNKNOWN_TASK\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010JNT_TASK\020\000\022"
    "\014\n\010EEF_TASK\020\001\022\n\n\006N_CMDS\020\002*V\n\nJntCmdType\022"
    "\030\n\013UNKNOWN_CMD\020\377\377\377\377\377\377\377\377\377\001\022\007\n\003POS\020\000\022\007\n\003VE"
    "L\020\001\022\007\n\003TOR\020\002\022\023\n\017N_JNT_CMD_TYPES\020\003*O\n\007Leg"
    "Type\022\030\n\013UNKNOWN_LEG\020\377\377\377\377\377\377\377\377\377\001\022\006\n\002FL\020\000\022\006"
    "\n\002FR\020\001\022\006\n\002HL\020\002\022\006\n\002HR\020\003\022\n\n\006N_LEGS\020\004*K\n\007Jn"
    "tType\022\030\n\013UNKNOWN_JNT\020\377\377\377\377\377\377\377\377\377\001\022\007\n\003YAW\020\000"
    "\022\007\n\003HIP\020\001\022\010\n\004KNEE\020\002\022\n\n\006N_JNTS\020\003*7\n\006FbTyp"
    "e\022\020\n\014JOINT_STATES\020\000\022\020\n\014POWER_STATES\020\001\022\t\n"
    "\005N_FBS\020\002*.\n\tPowerFlag\022\016\n\nVOLTAGE_OK\020\001\022\021\n"
    "\rVOLTAGE_ERROR\020\002", 1016);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dragon.proto", &protobuf_RegisterTypes);
  JntCmd::default_instance_ = new JntCmd();
  Command::default_instance_ = new Command();
  JointStates::default_instance_ = new JointStates();
  PowerStates::default_instance_ = new PowerStates();
  Feedback::default_instance_ = new Feedback();
  JntCmd::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  JointStates::default_instance_->InitAsDefaultInstance();
  PowerStates::default_instance_->InitAsDefaultInstance();
  Feedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dragon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dragon_2eproto {
  StaticDescriptorInitializer_dragon_2eproto() {
    protobuf_AddDesc_dragon_2eproto();
  }
} static_descriptor_initializer_dragon_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JntCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JntCmdType_descriptor_;
}
bool JntCmdType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LegType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegType_descriptor_;
}
bool LegType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JntType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JntType_descriptor_;
}
bool JntType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FbType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FbType_descriptor_;
}
bool FbType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PowerFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerFlag_descriptor_;
}
bool PowerFlag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int JntCmd::kLegFieldNumber;
const int JntCmd::kJntFieldNumber;
const int JntCmd::kTypeFieldNumber;
const int JntCmd::kCmdFieldNumber;
#endif  // !_MSC_VER

JntCmd::JntCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:middleware.JntCmd)
}

void JntCmd::InitAsDefaultInstance() {
}

JntCmd::JntCmd(const JntCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:middleware.JntCmd)
}

void JntCmd::SharedCtor() {
  _cached_size_ = 0;
  leg_ = -1;
  jnt_ = -1;
  type_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JntCmd::~JntCmd() {
  // @@protoc_insertion_point(destructor:middleware.JntCmd)
  SharedDtor();
}

void JntCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JntCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JntCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JntCmd_descriptor_;
}

const JntCmd& JntCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dragon_2eproto();
  return *default_instance_;
}

JntCmd* JntCmd::default_instance_ = NULL;

JntCmd* JntCmd::New() const {
  return new JntCmd;
}

void JntCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JntCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, cmd_);
    leg_ = -1;
    jnt_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JntCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:middleware.JntCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .middleware.LegType leg = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::LegType_IsValid(value)) {
            set_leg(static_cast< ::middleware::LegType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jnt;
        break;
      }

      // required .middleware.JntType jnt = 2;
      case 2: {
        if (tag == 16) {
         parse_jnt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::JntType_IsValid(value)) {
            set_jnt(static_cast< ::middleware::JntType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .middleware.JntCmdType type = 3 [default = POS];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::JntCmdType_IsValid(value)) {
            set_type(static_cast< ::middleware::JntCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cmd;
        break;
      }

      // required float cmd = 4;
      case 4: {
        if (tag == 37) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:middleware.JntCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:middleware.JntCmd)
  return false;
#undef DO_
}

void JntCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:middleware.JntCmd)
  // required .middleware.LegType leg = 1;
  if (has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->leg(), output);
  }

  // required .middleware.JntType jnt = 2;
  if (has_jnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->jnt(), output);
  }

  // required .middleware.JntCmdType type = 3 [default = POS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required float cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:middleware.JntCmd)
}

::google::protobuf::uint8* JntCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:middleware.JntCmd)
  // required .middleware.LegType leg = 1;
  if (has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->leg(), target);
  }

  // required .middleware.JntType jnt = 2;
  if (has_jnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->jnt(), target);
  }

  // required .middleware.JntCmdType type = 3 [default = POS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required float cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:middleware.JntCmd)
  return target;
}

int JntCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .middleware.LegType leg = 1;
    if (has_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg());
    }

    // required .middleware.JntType jnt = 2;
    if (has_jnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jnt());
    }

    // required .middleware.JntCmdType type = 3 [default = POS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required float cmd = 4;
    if (has_cmd()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JntCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JntCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JntCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JntCmd::MergeFrom(const JntCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg()) {
      set_leg(from.leg());
    }
    if (from.has_jnt()) {
      set_jnt(from.jnt());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JntCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JntCmd::CopyFrom(const JntCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JntCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JntCmd::Swap(JntCmd* other) {
  if (other != this) {
    std::swap(leg_, other->leg_);
    std::swap(jnt_, other->jnt_);
    std::swap(type_, other->type_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JntCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JntCmd_descriptor_;
  metadata.reflection = JntCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kIdxFieldNumber;
const int Command::kJntCmdFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:middleware.Command)
}

void Command::InitAsDefaultInstance() {
  jnt_cmd_ = const_cast< ::middleware::JntCmd*>(&::middleware::JntCmd::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:middleware.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  idx_ = -1;
  jnt_cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:middleware.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete jnt_cmd_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dragon_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    idx_ = -1;
    if (has_jnt_cmd()) {
      if (jnt_cmd_ != NULL) jnt_cmd_->::middleware::JntCmd::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:middleware.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .middleware.CmdType idx = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::CmdType_IsValid(value)) {
            set_idx(static_cast< ::middleware::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_jnt_cmd;
        break;
      }

      // optional .middleware.JntCmd jnt_cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_jnt_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jnt_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:middleware.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:middleware.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:middleware.Command)
  // required .middleware.CmdType idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->idx(), output);
  }

  // optional .middleware.JntCmd jnt_cmd = 2;
  if (has_jnt_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jnt_cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:middleware.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:middleware.Command)
  // required .middleware.CmdType idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->idx(), target);
  }

  // optional .middleware.JntCmd jnt_cmd = 2;
  if (has_jnt_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jnt_cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:middleware.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .middleware.CmdType idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->idx());
    }

    // optional .middleware.JntCmd jnt_cmd = 2;
    if (has_jnt_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jnt_cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_jnt_cmd()) {
      mutable_jnt_cmd()->::middleware::JntCmd::MergeFrom(from.jnt_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_jnt_cmd()) {
    if (!this->jnt_cmd().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(jnt_cmd_, other->jnt_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointStates::kLegFieldNumber;
const int JointStates::kPosFieldNumber;
#endif  // !_MSC_VER

JointStates::JointStates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:middleware.JointStates)
}

void JointStates::InitAsDefaultInstance() {
}

JointStates::JointStates(const JointStates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:middleware.JointStates)
}

void JointStates::SharedCtor() {
  _cached_size_ = 0;
  leg_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointStates::~JointStates() {
  // @@protoc_insertion_point(destructor:middleware.JointStates)
  SharedDtor();
}

void JointStates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointStates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointStates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointStates_descriptor_;
}

const JointStates& JointStates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dragon_2eproto();
  return *default_instance_;
}

JointStates* JointStates::default_instance_ = NULL;

JointStates* JointStates::New() const {
  return new JointStates;
}

void JointStates::Clear() {
  leg_ = -1;
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:middleware.JointStates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .middleware.LegType leg = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::LegType_IsValid(value)) {
            set_leg(static_cast< ::middleware::LegType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated float pos = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pos())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:middleware.JointStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:middleware.JointStates)
  return false;
#undef DO_
}

void JointStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:middleware.JointStates)
  // required .middleware.LegType leg = 1;
  if (has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->leg(), output);
  }

  // repeated float pos = 2 [packed = true];
  if (this->pos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pos_cached_byte_size_);
  }
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:middleware.JointStates)
}

::google::protobuf::uint8* JointStates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:middleware.JointStates)
  // required .middleware.LegType leg = 1;
  if (has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->leg(), target);
  }

  // repeated float pos = 2 [packed = true];
  if (this->pos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pos_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:middleware.JointStates)
  return target;
}

int JointStates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .middleware.LegType leg = 1;
    if (has_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg());
    }

  }
  // repeated float pos = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->pos_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pos_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointStates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointStates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointStates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointStates::MergeFrom(const JointStates& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg()) {
      set_leg(from.leg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointStates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointStates::CopyFrom(const JointStates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointStates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JointStates::Swap(JointStates* other) {
  if (other != this) {
    std::swap(leg_, other->leg_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointStates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointStates_descriptor_;
  metadata.reflection = JointStates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerStates::kVoltageFieldNumber;
const int PowerStates::kCurrentFieldNumber;
const int PowerStates::kOvervoltageFieldNumber;
const int PowerStates::kOvercurrentFieldNumber;
#endif  // !_MSC_VER

PowerStates::PowerStates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:middleware.PowerStates)
}

void PowerStates::InitAsDefaultInstance() {
}

PowerStates::PowerStates(const PowerStates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:middleware.PowerStates)
}

void PowerStates::SharedCtor() {
  _cached_size_ = 0;
  voltage_ = 0;
  current_ = 0;
  overvoltage_ = 1;
  overcurrent_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerStates::~PowerStates() {
  // @@protoc_insertion_point(destructor:middleware.PowerStates)
  SharedDtor();
}

void PowerStates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerStates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerStates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerStates_descriptor_;
}

const PowerStates& PowerStates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dragon_2eproto();
  return *default_instance_;
}

PowerStates* PowerStates::default_instance_ = NULL;

PowerStates* PowerStates::New() const {
  return new PowerStates;
}

void PowerStates::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PowerStates*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(voltage_, current_);
    overvoltage_ = 1;
    overcurrent_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:middleware.PowerStates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float voltage = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_current;
        break;
      }

      // required float current = 2;
      case 2: {
        if (tag == 21) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overvoltage;
        break;
      }

      // required .middleware.PowerFlag overvoltage = 3;
      case 3: {
        if (tag == 24) {
         parse_overvoltage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::PowerFlag_IsValid(value)) {
            set_overvoltage(static_cast< ::middleware::PowerFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overcurrent;
        break;
      }

      // required .middleware.PowerFlag overcurrent = 4;
      case 4: {
        if (tag == 32) {
         parse_overcurrent:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::PowerFlag_IsValid(value)) {
            set_overcurrent(static_cast< ::middleware::PowerFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:middleware.PowerStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:middleware.PowerStates)
  return false;
#undef DO_
}

void PowerStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:middleware.PowerStates)
  // required float voltage = 1;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->voltage(), output);
  }

  // required float current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->current(), output);
  }

  // required .middleware.PowerFlag overvoltage = 3;
  if (has_overvoltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->overvoltage(), output);
  }

  // required .middleware.PowerFlag overcurrent = 4;
  if (has_overcurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->overcurrent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:middleware.PowerStates)
}

::google::protobuf::uint8* PowerStates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:middleware.PowerStates)
  // required float voltage = 1;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->voltage(), target);
  }

  // required float current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->current(), target);
  }

  // required .middleware.PowerFlag overvoltage = 3;
  if (has_overvoltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->overvoltage(), target);
  }

  // required .middleware.PowerFlag overcurrent = 4;
  if (has_overcurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->overcurrent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:middleware.PowerStates)
  return target;
}

int PowerStates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float voltage = 1;
    if (has_voltage()) {
      total_size += 1 + 4;
    }

    // required float current = 2;
    if (has_current()) {
      total_size += 1 + 4;
    }

    // required .middleware.PowerFlag overvoltage = 3;
    if (has_overvoltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->overvoltage());
    }

    // required .middleware.PowerFlag overcurrent = 4;
    if (has_overcurrent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->overcurrent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerStates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerStates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerStates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerStates::MergeFrom(const PowerStates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_overvoltage()) {
      set_overvoltage(from.overvoltage());
    }
    if (from.has_overcurrent()) {
      set_overcurrent(from.overcurrent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerStates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerStates::CopyFrom(const PowerStates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStates::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PowerStates::Swap(PowerStates* other) {
  if (other != this) {
    std::swap(voltage_, other->voltage_);
    std::swap(current_, other->current_);
    std::swap(overvoltage_, other->overvoltage_);
    std::swap(overcurrent_, other->overcurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerStates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerStates_descriptor_;
  metadata.reflection = PowerStates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Feedback::kIdxFieldNumber;
const int Feedback::kJointStatesFieldNumber;
const int Feedback::kPowerStatesFieldNumber;
#endif  // !_MSC_VER

Feedback::Feedback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:middleware.Feedback)
}

void Feedback::InitAsDefaultInstance() {
  joint_states_ = const_cast< ::middleware::JointStates*>(&::middleware::JointStates::default_instance());
  power_states_ = const_cast< ::middleware::PowerStates*>(&::middleware::PowerStates::default_instance());
}

Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:middleware.Feedback)
}

void Feedback::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  joint_states_ = NULL;
  power_states_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:middleware.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != default_instance_) {
    delete joint_states_;
    delete power_states_;
  }
}

void Feedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feedback_descriptor_;
}

const Feedback& Feedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dragon_2eproto();
  return *default_instance_;
}

Feedback* Feedback::default_instance_ = NULL;

Feedback* Feedback::New() const {
  return new Feedback;
}

void Feedback::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    idx_ = 0;
    if (has_joint_states()) {
      if (joint_states_ != NULL) joint_states_->::middleware::JointStates::Clear();
    }
    if (has_power_states()) {
      if (power_states_ != NULL) power_states_->::middleware::PowerStates::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:middleware.Feedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .middleware.FbType idx = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::middleware::FbType_IsValid(value)) {
            set_idx(static_cast< ::middleware::FbType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joint_states;
        break;
      }

      // optional .middleware.JointStates joint_states = 2;
      case 2: {
        if (tag == 18) {
         parse_joint_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joint_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_power_states;
        break;
      }

      // optional .middleware.PowerStates power_states = 3;
      case 3: {
        if (tag == 26) {
         parse_power_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:middleware.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:middleware.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:middleware.Feedback)
  // required .middleware.FbType idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->idx(), output);
  }

  // optional .middleware.JointStates joint_states = 2;
  if (has_joint_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joint_states(), output);
  }

  // optional .middleware.PowerStates power_states = 3;
  if (has_power_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->power_states(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:middleware.Feedback)
}

::google::protobuf::uint8* Feedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:middleware.Feedback)
  // required .middleware.FbType idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->idx(), target);
  }

  // optional .middleware.JointStates joint_states = 2;
  if (has_joint_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->joint_states(), target);
  }

  // optional .middleware.PowerStates power_states = 3;
  if (has_power_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->power_states(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:middleware.Feedback)
  return target;
}

int Feedback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .middleware.FbType idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->idx());
    }

    // optional .middleware.JointStates joint_states = 2;
    if (has_joint_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joint_states());
    }

    // optional .middleware.PowerStates power_states = 3;
    if (has_power_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_states());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Feedback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Feedback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_joint_states()) {
      mutable_joint_states()->::middleware::JointStates::MergeFrom(from.joint_states());
    }
    if (from.has_power_states()) {
      mutable_power_states()->::middleware::PowerStates::MergeFrom(from.power_states());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_joint_states()) {
    if (!this->joint_states().IsInitialized()) return false;
  }
  if (has_power_states()) {
    if (!this->power_states().IsInitialized()) return false;
  }
  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(joint_states_, other->joint_states_);
    std::swap(power_states_, other->power_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feedback_descriptor_;
  metadata.reflection = Feedback_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace middleware

// @@protoc_insertion_point(global_scope)
